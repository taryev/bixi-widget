{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "red",
    "glyph" : "bicycle"
  },
  "name" : "Bixi-widget",
  "script" : "\/**\n * SCRIPTABLE BIXI WIDGET\n * Quentin Veyrat \/ https:\/\/github.com\/taryev\n *\n * État des stations de vélo-partage BIXI Montréal\n *\n * ---\n * Icons from : Icons8.com\n *\n * **\/\n\n\/** Widget settings **\/\nconst settings = {\n    \/\/ Global\n    \"debug\": false,\n    \"cache_folder_name\": \"bixi-widget\",\n    \"assets_base_url\": \"https:\/\/lab.deltaplane.dev\/bixiwidget\/assets\/\",\n    \"gbfs_stations_status_url\": \"https:\/\/gbfs.velobixi.com\/gbfs\/fr\/station_status.json\",\n    \"gbfs_stations_status_file\": \"station_status.json\",\n    \"show_ebikes\": true,\n\n    \/\/ Stations\n    \"stations\": {\n        \"Métro Sherbrooke\": \"19\",\n        \"ÉTS (Peel\/N-D)\": \"77\",\n    },\n\n    \/\/ UI\n    \"update_font\": Font.ultraLightSystemFont(12),\n    \"figures_font\": Font.regularRoundedSystemFont(16),\n    \"station_font\": Font.regularSystemFont(14),\n    \"bike_color\": Color.white(),\n    \"ebike_color\": Color.blue(),\n    \"parking_color\": Color.white(),\n    \"icon_size\": new Size(20,20),\n    \"accessory_scale_factor\": 0.9,\n}\n\n\/** Date Formatter **\/\nconst dateFormatter = new DateFormatter()\ndateFormatter.useMediumTimeStyle()\n\n\/** Files Manager - Cache **\/\nconst files = FileManager.local()\nconst cachePath = files.joinPath(files.cacheDirectory(), settings.cache_folder_name)\nif(settings.debug) files.remove(cachePath)\nif(!files.isDirectory(cachePath)) files.createDirectory(cachePath)\nconst isOnline = await onlineCheck()\n\n\/** Assets **\/\nconst assets = await loadAssets()\n\n\/** Widget display **\/\nif (config.runsInAccessoryWidget) {\n    const widget = await createLockScreenWidget()\n    Script.setWidget(widget)\n} else if (config.runsInWidget) {\n    const widget = await createHomeScreenWidget()\n    Script.setWidget(widget)\n}\nelse {\n    const widget = await createHomeScreenWidget()\n    widget.presentSmall()\n}\n\nScript.complete()\n\n\/** Lock Screen Widget **\/\nasync function createLockScreenWidget(){\n\n    \/\/ Widget base\n    const widget = new ListWidget()\n    widget.setPadding(0,5,0,0)\n    \/\/ Widget content\n    const content = widget.addStack()\n    content.layoutVertically()\n    addWidgetData(content, assets)\n    widget.addSpacer()\n\n    return widget\n}\n\n\/** Home Screen Widget **\/\nasync function createHomeScreenWidget(){\n\n    \/\/ Widget base\n    const widget = new ListWidget()\n    widget.backgroundGradient = backgroundGradient()\n    const bixiIcon = widget.addImage(assets.bixiIcon)\n    bixiIcon.tintColor = Color.white()\n    bixiIcon.imageSize = new Size(45,20)\n    widget.addSpacer(10)\n\n    \/\/ Widget Content\n    const content = widget.addStack()\n    content.layoutVertically()\n\n    addWidgetData(content)\n\n    widget.addSpacer()\n    const footer = widget.addStack()\n\n    \/\/ Offline indicator\n    if(!isOnline){\n        const offlineIcon = SFSymbol.named(\"antenna.radiowaves.left.and.right.slash\")\n        const offlineIndicator = footer.addImage(offlineIcon.image)\n        offlineIndicator.tintColor = Color.gray()\n        offlineIndicator.imageSize = new Size(12,12)\n        footer.addSpacer(5)\n    }\n    \/\/ Update date\n    const updatedAt = footer.addText(\"MàJ à \")\n    updatedAt.font = settings.update_font\n    let date = new Date()\n    if(isOnline){\n        saveUpdateDate()\n    } else {\n        date = dateFormatter.date(loadUpdateDate())\n    }\n    const updateDate = footer.addDate(date)\n    updateDate.applyTimeStyle()\n    updateDate.font = settings.update_font\n    return widget\n}\n\n\/** Functions **\/\n\/\/ Widget data\nfunction addWidgetData(parentStack){\n    \/\/ GBFS Data\n    gbfs_data = assets.gbfs.data.stations\n\n    for(const [label, id] of Object.entries(settings.stations)){\n        \/\/ Data\n        const gbfs_station_data = gbfs_data.find(station => station.station_id === id)\n        ebikes_data = gbfs_station_data.num_ebikes_available\n        bikes_data = gbfs_station_data.num_bikes_available - ebikes_data\n        parking_data = gbfs_station_data.num_docks_available\n\n        \/\/ Station infos\n        const station_title = parentStack.addText(label)\n        station_title.font = settings.station_font\n        if(config.runsInAccessoryWidget)\n            station_title.minimumScaleFactor = settings.accessory_scale_factor\n        const station_data = parentStack.addStack()\n\n        \/\/ Bike infos\n        addDataItem(station_data, bikes_data, 'BIKE')\n\n        \/\/ eBikes infos\n        if (settings.show_ebikes){\n            addDataItem(station_data, ebikes_data, 'EBIKE')\n        }\n\n        \/\/ Parking infos\n        addDataItem(station_data, parking_data, 'PARKING')\n    }\n}\n\n\/\/ Item data\nfunction addDataItem(parentStack, data, type){\n    const itemCount = parentStack.addText(data.toString())\n    itemCount.font = settings.figures_font\n    let iconType, iconTint = undefined\n    switch (type){\n        case 'BIKE':\n            iconType = assets.bikeIcon\n            iconTint = settings.bike_color\n            break\n        case 'EBIKE':\n            iconType = assets.ebikeIcon\n            iconTint = settings.ebike_color\n            break\n        case 'PARKING':\n            iconType = assets.parkingIcon\n            iconTint = settings.parking_color\n            break\n    }\n    const itemIcon = parentStack.addImage(iconType)\n    itemIcon.tintColor = iconTint\n    itemIcon.imageSize = settings.icon_size\n    parentStack.addSpacer(5)\n}\n\n\/\/ Widget Background\nfunction backgroundGradient() {\n    const gradient = new LinearGradient()\n    gradient.locations = [0,1]\n    gradient.colors = [\n        new Color(\"141414\"),\n        new Color(\"13233F\")\n    ]\n    return gradient\n}\n\n\/\/ Online Check\nasync function onlineCheck(){\n    try {\n        await new Request(settings.assets_base_url + \"ping.txt\").load()\n        console.log('Device is online')\n        return true\n    } catch(e) {\n        console.log(\"Device is offline\")\n        return false\n    }\n}\n\n\/\/ Cache check\nfunction isCached(fileName){\n    const filePath = files.joinPath(cachePath, fileName)\n    return files.fileExists(filePath)\n}\n\n\/\/ Images loading and caching\nfunction cacheImage(imageName, imageFile){\n    const imagePath = files.joinPath(cachePath, imageName)\n    return files.writeImage(imagePath, imageFile)\n}\nasync function loadOnlineImage(imageUrl) {\n    const req = new Request(imageUrl)\n    return await req.loadImage()\n}\nfunction loadCachedImage(imageFile){\n    return files.readImage(files.joinPath(cachePath, imageFile))\n}\nasync function loadIcon(iconFile){\n    if(!isCached(iconFile)){\n        const icon = await loadOnlineImage(settings.assets_base_url + iconFile)\n        cacheImage(iconFile, icon)\n        return icon\n    } else {\n        return loadCachedImage(iconFile)\n    }\n}\n\n\/\/ Last update\nfunction saveUpdateDate(){\n    const updateDate = new Date()\n    const updateDatePath = files.joinPath(cachePath, \"lastUpdate.txt\")\n    const stringDate = dateFormatter.string(updateDate)\n    files.writeString(updateDatePath, stringDate)\n}\nfunction loadUpdateDate(){\n    const updateDatePath = files.joinPath(cachePath, \"lastUpdate.txt\")\n    return files.readString(updateDatePath)\n}\n\n\/\/ Gbfs loading and caching\nfunction cacheGbfs(gbfsFile){\n    return files.writeString(getGbfsPath(), gbfsFile)\n}\nasync function loadOnlineGbfs(){\n    const req = new Request(settings.gbfs_stations_status_url)\n    const json =  await req.loadJSON()\n    return JSON.stringify(json)\n}\nfunction loadCachedGbfs(){\n    let gbfsData = files.readString(getGbfsPath())\n    gbfsData = JSON.parse(gbfsData)\n    return gbfsData\n}\nasync function loadGbfs(){\n    if(isOnline){\n        const gbfsFile = await loadOnlineGbfs()\n        cacheGbfs(gbfsFile)\n        return JSON.parse(gbfsFile)\n    } else {\n        return loadCachedGbfs()\n    }\n}\nfunction getGbfsPath(){\n    return files.joinPath(cachePath, settings.gbfs_stations_status_file)\n}\n\n\/\/ Data loading\nasync function loadAssets() {\n\n    const bixiIcon = await loadIcon(\"bixi.png\")\n    const bikeIcon = await loadIcon(\"bike.png\")\n    const ebikeIcon = await loadIcon(\"ebike.png\")\n    const parkingIcon = await loadIcon(\"parking.png\")\n    const gbfsData = await loadGbfs()\n\n    return {\"bixiIcon\": bixiIcon, \"bikeIcon\" : bikeIcon, \"ebikeIcon\" : ebikeIcon, \"parkingIcon\": parkingIcon, \"gbfs\": gbfsData}\n}\n",
  "share_sheet_inputs" : [

  ]
}